@model ScheduleForm
@{
    ViewData["Stylesheet"] = "/css/manager.css";
    ViewData["Title"] = "Inroostering";

    int weekday = 1;
    switch(new DateOnly(ViewBag.Date.Year, ViewBag.Date.Month, 1).DayOfWeek)
    {
        case DayOfWeek.Monday:    weekday = 1; break;
        case DayOfWeek.Tuesday:   weekday = 2; break;
        case DayOfWeek.Wednesday: weekday = 3; break;
        case DayOfWeek.Thursday:  weekday = 4; break;
        case DayOfWeek.Friday:    weekday = 5; break;
        case DayOfWeek.Saturday:  weekday = 6; break;
        case DayOfWeek.Sunday:    weekday = 7; break;
    }

    string link = "/Manager/Scheduling?departmentName=" + ViewBag.Department.Name + "&";
    string fetchDataLink = "/Manager/GetScheduledDays?departmentName=" + ViewBag.Department.Name;
}

<div class="content_container">
    <aside>
        <partial name="../Desktop/Calendar.cshtml" model="new CalendarData {
            CurrentMonth = ViewBag.Date.Month,
            CurrentYear = ViewBag.Date.Year,
            FirstWeekdayOfMonth = weekday,
            Today = DateOnly.FromDateTime(DateTime.Today),
            Selected = DateOnly.FromDateTime(ViewBag.Date),
            MinimumDay = DateOnly.FromDateTime(DateTime.Today),
            Link = link,
            FetchDataLink = fetchDataLink
        };" />
        <hr />
        <p>Afdeling</p>
        <ul>
            @foreach(var department in ViewBag.Departments)
            {
                var linkClasses = "";
                @if(department.Name == ViewBag.Department.Name)
                {
                    linkClasses = "blue";
                }
                <li class="@linkClasses"><a asp-controller="Manager" asp-action="Scheduling" asp-route-departmentName="@department.Name" asp-route-year="@ViewBag.Date.Year" asp-route-month="@ViewBag.Date.Month" asp-route-day="@ViewBag.Date.Day">@department.Name</a></li>
            }
        </ul>
    </aside>
    <div>
        <header>
            <h1 class="align_center">
                <a class="button nav_button" asp-controller="Manager" asp-action="Scheduling" asp-route-departmentName="@ViewBag.Department.Name" asp-route-year="@ViewBag.Date.AddDays(-1).Year" asp-route-month="@ViewBag.Date.AddDays(-1).Month" asp-route-day="@ViewBag.Date.AddDays(-1).Day">&#x2039;</a>
                Inroostering: @ViewBag.DutchDate
                <a class="button nav_button" asp-controller="Manager" asp-action="Scheduling" asp-route-departmentName="@ViewBag.Department.Name" asp-route-year="@ViewBag.Date.AddDays(1).Year" asp-route-month="@ViewBag.Date.AddDays(1).Month" asp-route-day="@ViewBag.Date.AddDays(1).Day">&#x203A;</a>
            </h1>
        </header>
        <form asp-action="Scheduling" enctype="multipart/form-data">
            <input type="hidden" asp-for="DepartmentName" value="@ViewBag.Department.Name" />
            <input type="hidden" asp-for="Day" value="@ViewBag.Date.Day" />
            <input type="hidden" asp-for="Month" value="@ViewBag.Date.Month" />
            <input type="hidden" asp-for="Year" value="@ViewBag.Date.Year" />
            <div class="space_around">
                <a href="javascript:void(0)" onclick="submit();" class="button">Opslaan</a>
            </div>
            <table>
                <tr>
                    <td class="align_center"></td>
                    <td class="align_center"></td>
                    <td class="align_center"></td>
                    @for(int hour = ViewBag.StartHour; hour <= ViewBag.EndHour; hour++)
                    {
                        <td class="align_center">@hour:00 - @hour:59</td>
                    }
                    <td class="align_center"></td>
                    <td class="align_center"></td>
                </tr>
                <tr class="seperator"></tr>
                <tr>
                    <td class="align_right" colspan="3">Prognose</td>
                    @for(int hour = ViewBag.StartHour; hour <= ViewBag.EndHour; hour++)
                    {
                        <td class="align_center prognosis_mismatch" id="text_hour_@hour">0/@ViewBag.EmployeePrognosis[hour]</td>
                    }
                </tr>
                <tr class="seperator"></tr>
                @{
                    int i = 0;
                    int eid = 0;
                }
                @foreach(var employee in ViewBag.Employees)
                {
                    <span class="hidden" id="today_employee_@employee.Id">@employee.AllowedHoursToday</span>
                    <span class="hidden" id="week_employee_@employee.Id">@employee.AllowedHoursWeek</span>
                    <span class="hidden" id="weeks_employee_@employee.Id">@employee.AllowedHours4Weeks</span>
                    @if(employee.CanWork)
                    {
                        <input type="hidden" id="sickness_employee_@employee.Id" asp-for="Sicknesses[eid]" value="@Model.Sicknesses[eid]" />
                        <tr>
                            <td class="align_right" colspan="3">@employee.Name</td>
                            @for(int hour = ViewBag.StartHour; hour <= ViewBag.EndHour; hour++)
                            {
                                if(!Model.Availabilities.Any(availability => availability.StartTime.Hour <= hour && availability.EndTime.Hour > hour && availability.EmployeeId == employee.Id)
                                || Model.Schedules.Any(schedule => schedule.StartTime.Hour <= hour && schedule.EndTime.Hour >= hour && schedule.EmployeeId == employee.Id))
                                {
                                    <td class="align_center"><input id="@i" type="checkbox" class="employee_@employee.Id checkbox_hour_@hour scheduling_checkbox unavailable_checkbox" onclick="update_text(@hour); update_constraints(@employee.Id);" asp-for="IsChecked[i]" disabled /></td>
                                }
                                else
                                {
                                    <td class="align_center"><input id="@i" type="checkbox" class="employee_@employee.Id checkbox_hour_@hour scheduling_checkbox" onclick="update_text(@hour); update_constraints(@employee.Id);" asp-for="IsChecked[i]" /></td>
                                }
                                i++;
                            }
                            <td class="align_right" colspan="2">
                                @if(!Model.Sicknesses[eid++])
                                {
                                    <a href="javascript:void(0)" id="sickness_button_employee_@employee.Id" class="button red_button" onclick="enable_sick_leave(@employee.Id);">Ziek</a>
                                    <a href="javascript:void(0)" id="undo_sickness_button_employee_@employee.Id" class="button hidden" onclick="disable_sick_leave(@employee.Id);">Annuleren</a>
                                }
                                else
                                {
                                    <a href="javascript:void(0)" id="sickness_button_employee_@employee.Id" class="button hidden red_button" onclick="enable_sick_leave(@employee.Id);">Ziek</a>
                                    <a href="javascript:void(0)" id="undo_sickness_button_employee_@employee.Id" class="button" onclick="disable_sick_leave(@employee.Id);">Annuleren</a>
                                }
                            </td>
                        </tr>
                    }
                    else if(employee.OnLeave)
                    {
                        <tr>
                            <td class="align_right" colspan="3">@employee.Name</td>
                            <td class="align_center" colspan="@(ViewBag.EndHour - ViewBag.StartHour + 1)">Deze medewerker is vrij.</td>
                        </tr>
                    }
                }
            </table>
        </form>
    </div>
</div>
<script>
    function update_text(id) {
        var max = $("#text_hour_" + id).text().split("/")[1];
        var current = 0;

        $(".checkbox_hour_" + id).each(function () {
            if ($(this).prop("checked") && !$(this).prop("disabled")) current++;
        })

        $("#text_hour_" + id).text(current + "/" + max);

        if (max == current) $("#text_hour_" + id).removeClass("prognosis_mismatch");
        else if (!$("#text_hour_" + id).hasClass("prognosis_mismatch")) $("#text_hour_" + id).addClass("prognosis_mismatch");
    }

    function update_constraints(id) {
        var hours_worked = 0;

        $(".employee_" + id).each(function () {
            if ($(this).prop("checked")) hours_worked++;
        })

        if (hours_worked >= $("#today_employee_" + id).text()) {
            $(".employee_" + id).each(function () {
                if (!$(this).prop("checked") && !$(this).prop("disabled")) {
                    $(this).prop("disabled", true);
                    $(this).addClass("overworked_today");
                }
            })
        } else {
            $(".employee_" + id).each(function () {
                if ($(this).hasClass("overworked_today")) {
                    $(this).prop("disabled", false);
                    $(this).removeClass("overworked_today");
                }
            })
        }

        if (hours_worked >= $("#week_employee_" + id).text()) {
            $(".employee_" + id).each(function () {
                if (!$(this).prop("checked") && !$(this).prop("disabled")) {
                    $(this).prop("disabled", true);
                    $(this).addClass("overworked_week");
                }
            })
        } else {
            $(".employee_" + id).each(function () {
                if ($(this).hasClass("overworked_week")) {
                    $(this).prop("disabled", false);
                    $(this).removeClass("overworked_week");
                }
            })
        }

        if (hours_worked >= $("#weeks_employee_" + id).text()) {
            $(".employee_" + id).each(function () {
                if (!$(this).prop("checked") && !$(this).prop("disabled")) {
                    $(this).prop("disabled", true);
                    $(this).addClass("overworked_4weeks");
                }
            })
        } else {
            $(".employee_" + id).each(function () {
                if ($(this).hasClass("overworked_4weeks")) {
                    $(this).prop("disabled", false);
                    $(this).removeClass("overworked_4weeks");
                }
            })
        }

        if ($("#sickness_employee_" + id).prop("value") == "True") {
            $(".employee_" + id).each(function () {
                if (!$(this).prop("disabled")) {
                    $(this).prop("disabled", true);
                    $(this).addClass("employee_sick");
                }
            })

            $("#sickness_button_employee_" + id).addClass("hidden");
            if ($("#undo_sickness_button_employee_" + id).hasClass("hidden")) {
                $("#undo_sickness_button_employee_" + id).removeClass("hidden");
            }
        } else {
            $(".employee_" + id).each(function () {
                if ($(this).hasClass("employee_sick")) {
                    $(this).prop("disabled", false);
                    $(this).removeClass("employee_sick");
                }
            })

            $("#undo_sickness_button_employee_" + id).addClass("hidden");
            if ($("#sickness_button_employee_" + id).hasClass("hidden")) {
                $("#sickness_button_employee_" + id).removeClass("hidden");
            }
        }
    }

    function enable_sick_leave(id) {
        $("#sickness_employee_" + id).prop("value", "True");

        update_constraints(id);
        
        for (let i = @ViewBag.StartHour; i <= @ViewBag.EndHour; i++) {
            update_text(i);
        }
    }

    function disable_sick_leave(id) {
        $("#sickness_employee_" + id).prop("value", "False");

        update_constraints(id);
        
        for (let i = @ViewBag.StartHour; i <= @ViewBag.EndHour; i++) {
            update_text(i);
        }
    }

    function submit() {
        $("input").prop("disabled", false);
        $("form").submit();
        for (let i = 0; i < @ViewBag.EmployeeIds.Count; i++) {
            update_constraints(idList[i]);
        }
    }

    window.onload = function () {
        let ids = "@string.Join(",", ViewBag.EmployeeIds)";
        let idList = ids.split(",");

        for (let i = 0; i < @ViewBag.EmployeeIds.Count; i++) {
            update_constraints(idList[i]);
        }

        for (let i = @ViewBag.StartHour; i <= @ViewBag.EndHour; i++) {
            update_text(i);
        }
    }
</script>